# DO NOT EDIT THIS FILE!
#
# All configuration must be done in the `configuration.py` file.

from pathlib import Path
from django.core.exceptions import ImproperlyConfigured
from ipaddress import IPv6Network, AddressValueError, NetmaskValueError

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

try:
    from sparky_web import configuration
except ImportError:
    raise ImproperlyConfigured(
        "Configuration file is not present. "
        "Please define sparky_web/configuration.py."
    )

REQUIRED_SETTINGS = [
    "ALLOWED_HOSTS",
    "CSRF_TRUSTED_ORIGINS",
    "DATABASE",
    "SECRET_KEY",
    "HEADSCALE_URL",
    "HEADSCALE_API_KEY",
    "PROBE_TAILNET_SUBNET",
    "PROBE_REPO_URL",
    "PROBE_REPO_ACCESS_TOKEN",
    "PROBE_NIXOS_STATE_VERSION",
    "PROBE_REPO_LOCAL_PATH",
    "METRICS_API_KEY",
]

for setting in REQUIRED_SETTINGS:
    if not hasattr(configuration, setting):
        raise ImproperlyConfigured(
            f"Mandatory setting {setting} is not in the configuration.py file."
        )

ALLOWED_HOSTS = getattr(configuration, "ALLOWED_HOSTS")
CSRF_TRUSTED_ORIGINS = getattr(configuration, 'CSRF_TRUSTED_ORIGINS', [])
DATABASE = getattr(configuration, "DATABASE")
SECRET_KEY = getattr(configuration, "SECRET_KEY")

DEBUG = getattr(configuration, "DEBUG", False)

METRICS_API_KEY = getattr(configuration, "METRICS_API_KEY")

API_KEY_EXPIRATION_DAYS_WARNING = getattr(configuration, "API_KEY_EXPIRATION_DAYS_WARNING", 30)
API_KEY_EXPIRATION_DAYS_CRITICAL = getattr(configuration, "API_KEY_EXPIRATION_DAYS_CRITICAL", 15)

if API_KEY_EXPIRATION_DAYS_CRITICAL >= API_KEY_EXPIRATION_DAYS_WARNING:
    raise ImproperlyConfigured(
        "The value of 'API_KEY_EXPIRATION_DAYS_CRITICAL' has to be smaller than the value of"
        "'API_KEY_EXPIRATION_DAYS_WARNING'."
    )

HEADSCALE_URL = getattr(configuration, "HEADSCALE_URL")
HEADSCALE_API_KEY = getattr(configuration, "HEADSCALE_API_KEY")

PROBE_REPO_URL = getattr(configuration, "PROBE_REPO_URL")
PROBE_REPO_ACCESS_TOKEN = getattr(configuration, "PROBE_REPO_ACCESS_TOKEN")

PROBE_TAILNET_SUBNET = getattr(configuration, "PROBE_TAILNET_SUBNET")
try:
    PROBE_TAILNET_SUBNET = IPv6Network(PROBE_TAILNET_SUBNET)
except (AddressValueError, NetmaskValueError, ValueError):
    raise ImproperlyConfigured(
        "The value of 'PROBE_TAILNET_SUBNET' has to be a valid IPv6 subnet."
    )

PROBE_NIXOS_STATE_VERSION = getattr(configuration, "PROBE_NIXOS_STATE_VERSION")

PROBE_REPO_LOCAL_PATH = getattr(configuration, "PROBE_REPO_LOCAL_PATH")

PROBE_HOSTNAME_PREFIX = getattr(configuration, "PROBE_HOSTNAME_PREFIX", "probe")

DATABASES = {"default": configuration.DATABASE}

try:
    with open("/etc/timezone", "r") as f:
        BASE_TZ = f.readline()

    # For some reasons, Django does not seem to be happy about this particular value
    if "Etc/UTC" in BASE_TZ:
        raise Exception("Unsupported TZ")
except (IOError, Exception):
    BASE_TZ = "UTC"
TIME_ZONE = getattr(configuration, "TIME_ZONE", BASE_TZ).rstrip()

try:
    from sparky_web.ldap_config import *

    LDAP_CONFIGURED = True
except ImportError:
    LDAP_CONFIGURED = False

# If LDAP is configured, load the config
if LDAP_CONFIGURED:
    try:
        import django_auth_ldap
        import ldap

        # Prepend LDAPBackend to the default ModelBackend
        AUTHENTICATION_BACKENDS = [
            "django_auth_ldap.backend.LDAPBackend",
        ]
    except ImportError:
        raise ImproperlyConfigured(
            "LDAP authentication has been configured, but django-auth-ldap is not "
            "installed. You can remove sparky_web/ldap_config.py to disable "
            "LDAP."
        )

VERSION = '1.5.0'

LOG_LEVEL = getattr(configuration, "DEBUG")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5',
    'fontawesomefree',
    'web',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sparky_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sparky_web.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
